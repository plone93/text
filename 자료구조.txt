#데이터 페이지
테이블을 생성하고 데이터를 삽입하면 데이터는 데이터 페이지에 논리적으로 기록이 됨
하나의 데이터페이지의 크기는 8kb이며 필드 크기만큼 저장된다
페이지마다 번호가 존재(100, 101, 102페이지..)

#인덱스 페이지
클러스터드/ 논 클러스터드 인덱스를 생성하게 되면
데이터 페이지와 같은 인덱스 페이지를 생성함

인덱스페이지 구조
지정한 컬럼, 인덱스 페이지 번호(루트노드)
지정한 컬럼, 데이터 페이지 번호(리프노드)


#클러스터드(정렬)
인덱스페이지>데이터페이지
인덱스페이지에 데이터페이지 번호가 존재
#논 클러스터드(비정렬)
인덱스페이지>인덱스페이지>데이터페이지



자료구조


#이진 트리(Binary Tree)
부모 노드 밑의 자식노드 개수를 최대 2개로 제한함
트리구조 중 가장 간단한 형태이며 왼쪽 자식, 오른쪽 자식으로 구분지음

이진 트리 순회 방법
중위 순회(In-order traversal): 왼쪽 자손, 자신, 오른쪽 자손 순서로 방문하는 순회 방법. 
                                      이진 탐색 트리를 중위 순회하면 정렬된 결과를 얻을 수 있다.
전위 순회(Pre-order traversal): 자신, 왼쪽 자손, 오른쪽 자손 순서로 방문하는 순회 방법.
후위 순회(Post-order traversal): 왼쪽 자손, 오른쪽 자손, 자신 순서로 방문하는 순회 방법.
레벨 순서 순회(Level-order traversal): 너비 우선 순회(Breadth-First traversal)라고도 한다. 
                                                 노드를 레벨 순서로 방문하는 순회 방법. 
                                                 위의 세 가지 방법은 스택을 활용하여 구현할 수 있는 반면 레벨 순서 순회는 큐를 활용해 구현할 수 있다.


#이진탐색(Binary Search)
하나의 노드가 최대 2개의 자식노드를 가짐
정렬이 된 숫자배열에서 임의의 값을 찾을 때 사용
1 3 4 (5) 10 11 13
x x x  x   10 (11) 13
x x x  x   10 x x
1. 처음엔 가운데 숫자를 조사해서 5를 얻음
2. 10은 5보다 크기 때문에 오른쪽 절반만 검색대상으로 변경
3. 오른쪽 가운데를 조사해서 11을 얻음
4. 10은 11보다 작기 때문에 왼쪽 절반만 검색대상으로 변경
5. 10를 발견함

#이진탐색트리(Binary Search Tree)
하나의 노드에 1개의 데이터만 가지고 있음
1 3 4 (5) 10 11 13
1 (3) 4  / 10 (11) 13
1  x  4  /  10  x   13
이진탐색은 작은 것과 큰것을 구분하면서 탐색을 진행하지만
이 탐색을 이진탐색트리라는 데이터구조로 표현할 수 있다.
B-Tree는 이진탐색트리를 일반화 해 다루는 것이 가능하다


#B-tree (이진탐색트리의 한계를 극복하기 위해 나옴)
하나의 노드에 여러 데이터를 가질 수 있다(이 데이터 개수를 m개라고 한다)
하나의 노드가 2개이상의 자식노드를 가질수 있다
각 노드에 있는 값은 정렬된 상태이다(오름차순)
모든 리프 노드는 같은 레벨에 존재해야한다(모든 리프노드들의 높이는 같다)
리프 노드에는 주소가 존재하며 주소를 따라가면 값이 있음
노드 데이터수가 m개라면 자식노드의 개수는 m+1개이다
루트 노드를 제외한 내부노드들은 적어도 m/2개의 자식노드를 가진다
루트 노드는 최소한 두개의 자식노드를 가진다

B-tree of order m
B-tree에서 order를 나타내는 숫자인 m을 가질수 있고
m을 가진 B-tree를 B-tree of order m 이라고 한다



#구조
1.테이블을 정렬함( 0 1 2 3 4 5 6 7 8 9  )
2.절반으로 나누어 
  루트노드(페이지1)에 0과(0~5) 6을(6~9) 넣음
3.중간노드(페이지2)에 0과(0~2) 3을(3~5) 넣음
  중간노드(페이지3)에 6과(6~7) 8을(8~9) 넣음
4.리프노드(페이지4)에 0 1 2
  리프노드(페이지5)에 3 4 5
  리프노드(페이지6)에 6 7
  리프노드(페이지7)에 8 9

리프노드에는 주소가 존재하며 주소를 따라가면 값을 찾을 수 있음


#B+tree
B-tree의 확장형
루트 노드와 중간 노드는 키를 이용하여 위치를 찾아가는 인덱스 역할만 하며
데이터 자체는 모두 리프노드에 저장한다
